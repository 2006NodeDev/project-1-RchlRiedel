{"version":3,"sources":["environment.ts","lotr-api/index.ts","lotr-api/lotr-login.ts","components/LoginComponent/LoginComponent.tsx","components/NavBarComponent/NavBarComponent.tsx","lotr-api/lotr-get-user-by-id.ts","components/UserDisplayComponent/UserDisplayComponent.tsx","components/ProfileComponent/ProfileComponent.tsx","components/HomeComponent/HomeComponent.tsx","lotr-api/lotr-sign-up.ts","components/SignUpComponent/SignUpComponent.tsx","lotr-api/lotr-update-user.ts","components/UpdateProfileComponent/UpdateProfileComponent.tsx","lotr-api/lotr-logout.ts","components/LogOutComponent/LogOutComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["lotrBaseUrl","lotrClient","axios","create","baseURL","headers","withCredentials","lotrLogin","username","password","a","credentials","post","response","console","log","data","LoginComponent","props","classes","useStyles","useState","changeUsername","changePassword","loginSubmit","e","preventDefault","res","userId","changeCurrentUser","history","push","toast","error","Container","component","maxWidth","CssBaseline","className","paper","Typography","variant","autoComplete","onSubmit","form","noValidate","Grid","container","spacing","item","xs","TextField","margin","required","fullWidth","id","label","name","value","onChange","event","currentTarget","type","sm","CustomButton","submit","to","style","textDecoration","withStyles","theme","root","color","palette","getContrastText","lime","backgroundColor","green","Button","makeStyles","marginTop","display","flexDirection","alignItems","avatar","secondary","main","width","fontSize","media","flexGrow","background","menuButton","marginRight","title","fontFamily","NavBarComponent","React","anchorEl","setAnchorEl","handleClose","Boolean","menuItems","useEffect","user","MenuItem","onClick","AppBar","position","Toolbar","IconButton","edge","aria-label","keepMounted","open","onClose","lotrGetUserById","get","minWidth","height","userInfo","UserDisplayComponent","Card","CardContent","CardMedia","alt","image","gutterBottom","firstName","lastName","email","role","ProfileComponent","userProfile","changeUserProfile","useParams","getUser","SignUpButton","justifyContent","text","HomeComponent","CardActions","lotrSignUp","SignUpComponent","confirmPassword","changeConfirmPassword","changeFirstName","changeLastName","changeEmail","changeImage","submitUser","newUser","htmlFor","accept","file","files","reader","FileReader","readAsDataURL","onload","result","src","lotrUpdateUser","patch","UpdateProfileComponent","updateUser","updatedUser","lotrLogOut","delete","LogOutComponent","logoutUser","App","currentUser","path","render","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0fc1991f.chunk.js","sourcesContent":["\r\nexport let lotrBaseUrl:string\r\n//this is the only env we get in front end, and technically anyone that downloads the site can read it \r\nif(process.env['NODE_ENV'] === 'production'){\r\n    //if we ran npm run build\r\n    //use the deployed address\r\n    lotrBaseUrl = 'http://lotr-project.lehcar.net'\r\n}else {\r\n    //we are in test or dev, use the local address\r\n    lotrBaseUrl = 'http://localhost:2007'\r\n}","import axios from \"axios\"\r\nimport { lotrBaseUrl } from \"../environment\"\r\n\r\n//for setting up the base axios client\r\n//axios allows us to build an object that holds all the base information/config for our connection to server\r\n//thus we can call axiosObject.get /post /patch etc.\r\n\r\n//we will use this to send all requests we make to the lightlyburnding api\r\nexport const lotrClient = axios.create ({\r\n    baseURL: lotrBaseUrl,\r\n    headers:{\r\n        'Content-Type': 'application/json'\r\n    },\r\n    withCredentials:true\r\n})","import { lotrClient } from \".\"\r\n\r\nexport const lotrLogin = async (username: String, password: String) =>{\r\n    let credentials = {\r\n        username,\r\n        password\r\n    }\r\n    try {\r\n        let response = await lotrClient.post('/login', credentials)\r\n        console.log(response);\r\n        return response.data //user?\r\n    } catch (e) {\r\n        console.log(e)\r\n        throw e\r\n    }\r\n}","import React, { FunctionComponent, useState, SyntheticEvent } from \"react\"\r\nimport { lotrLogin } from \"../../lotr-api/lotr-login\"\r\nimport { RouteComponentProps } from \"react-router\"\r\nimport {TextField, Button, makeStyles, Container, CssBaseline, Typography, Grid, withStyles} from \"@material-ui/core\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { green, lime } from \"@material-ui/core/colors\"\r\nimport { toast } from \"react-toastify\"\r\n\r\ninterface ILoginProps extends RouteComponentProps{\r\n    changeCurrentUser:(newUser:any)=>void\r\n}\r\n\r\nexport const LoginComponent:FunctionComponent<ILoginProps> = (props) => {\r\n    const classes = useStyles();\r\n\r\n    //we need to keep track of a username and a password... \r\n    //(user was moved to App.tsx when we added the interface)\r\n    const [username, changeUsername] = useState(\"\")\r\n    const [password, changePassword] = useState(\"\")\r\n\r\n    const updatePassword = (event:any) => { \r\n        event.preventDefault() \r\n        changePassword(event.currentTarget.value) \r\n    }\r\n\r\n    const updateUsername = (event:any) => {\r\n        event.preventDefault()\r\n        changeUsername(event.currentTarget.value) \r\n    }\r\n    \r\n    const loginSubmit = async (e:SyntheticEvent) => { \r\n        e.preventDefault()\r\n        let res = await lotrLogin(username, password) \r\n        console.log(res)\r\n        \r\n        if (!res.userId){\r\n            toast.error('Invalid Credentials! Please try again.')\r\n            props.history.push(`/login`) \r\n        } else {\r\n            props.changeCurrentUser(res) \r\n            props.history.push(`/user/profile/${res.userId}`) \r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n            Login\r\n            </Typography>\r\n            <form autoComplete=\"off\" onSubmit={loginSubmit} className={classes.form} noValidate>\r\n            <Grid container spacing={2}>\r\n                <Grid item xs={12}>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"username\"\r\n                    label=\"Username\"\r\n                    name=\"username\"\r\n                    value={username}\r\n                    onChange={updateUsername}\r\n                />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    value={password}\r\n                    onChange={updatePassword}\r\n                />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                <CustomButton\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    className={classes.submit}\r\n                > Login\r\n                </CustomButton>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                <Link to= \"/home\" style={{ textDecoration:\"none\"}}>\r\n                <CustomButton\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    className={classes.submit}\r\n                > Cancel \r\n                </CustomButton>\r\n                </Link>\r\n                </Grid>\r\n            </Grid>            \r\n            </form>\r\n        </div>\r\n        </Container>\r\n        )\r\n    }\r\n    \r\n    \r\nconst CustomButton = withStyles((theme) => ({\r\n    root: {\r\n        color: theme.palette.getContrastText(lime[700]),\r\n        backgroundColor: \"lime[700]\",\r\n        '&:hover': {\r\n          backgroundColor: green[900],\r\n        },\r\n    },\r\n  }))(Button);\r\n  \r\n//styles at the bottom because closer to html return\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%',\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n        backgroundColor: lime[700],\r\n        color: 'white',\r\n        //background color?\r\n        //fontFamily: '',\r\n        fontSize: 16,\r\n    },\r\n    media: {\r\n\r\n    }\r\n}));","import React, { FunctionComponent, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport { Link } from 'react-router-dom';\r\nimport { green } from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles((theme) => ({ //change color too\r\n  root: {\r\n    flexGrow: 1,\r\n    background: green[900]\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    fontFamily: \"Bookman Old Style\"\r\n  },\r\n}));\r\n\r\nexport const NavBarComponent:FunctionComponent<any> = (props) => {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleClick = (event:any) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  let menuItems = []\r\n  //changes the nav bar back after logout for when the there is no currenUser\r\n  useEffect(()=>{\r\n      if (props.user === null){\r\n        menuItems = []\r\n        menuItems.push(\r\n          <Link to= \"/login\" style={{ textDecoration:\"none\"}}><MenuItem onClick={handleClose}>Login</MenuItem></Link>,\r\n          <Link to= \"/register\" style={{ textDecoration:\"none\"}}><MenuItem onClick={handleClose}>Sign Up</MenuItem></Link>,\r\n          <Link to= \"/home\" style={{ textDecoration:\"none\"}}><MenuItem onClick={handleClose}>Home</MenuItem></Link>)\r\n      }\r\n  })\r\n\r\n  if (props.user) {\r\n    menuItems.push(\r\n      <Link to= \"/home\" style={{ textDecoration:\"none\"}}><MenuItem onClick={handleClose}>Home</MenuItem></Link>,\r\n      <Link to={`/user/profile/${(props.user)?props.user.userId : '0' }`} style={{ textDecoration:\"none\"}}><MenuItem onClick={handleClose}>User Profile</MenuItem></Link>,\r\n      <Link to ={`/user/update/${(props.user)?props.user.userId : '0' }`} style={{ textDecoration:\"none\"}}><MenuItem onClick={handleClose}>Edit Account Details</MenuItem></Link>,\r\n      <Link to=\"/logout\" style={{ textDecoration:\"none\"}}><MenuItem onClick={handleClose}>Logout</MenuItem></Link>)\r\n      //info page? \r\n  } else {\r\n    menuItems.push(\r\n      <Link to= \"/home\" style={{ textDecoration:\"none\"}}><MenuItem onClick={handleClose}>Home</MenuItem></Link>,\r\n      <Link to= \"/login\" style={{ textDecoration:\"none\"}}><MenuItem onClick={handleClose}>Login</MenuItem></Link>,\r\n      <Link to= \"/register\" style={{ textDecoration:\"none\"}}><MenuItem onClick={handleClose}>Sign Up</MenuItem></Link>\r\n    )\r\n  }\r\n//    if(props.user && props.user.role === 'Admin'){ for get all users (for later)\r\n\r\n    return (\r\n      <nav>\r\n        <AppBar position=\"static\" className={classes.root}>\r\n          <Toolbar>\r\n            <IconButton onClick={handleClick} edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n              <MenuIcon />\r\n            </IconButton>\r\n              <Menu id=\"simple-menu\"\r\n              anchorEl={anchorEl}\r\n              keepMounted\r\n              open={Boolean(anchorEl)}\r\n              onClose={handleClose}> \r\n              {menuItems}\r\n              </Menu>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              The Fellowship of the Ring Membership\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </nav>\r\n      \r\n  );\r\n}","import { lotrClient } from \".\"\r\n\r\nexport const lotrGetUserById = async (userId:number) =>{ \r\n    try {\r\n        let response = await lotrClient.get(`/users/${userId}`)\r\n        return response.data\r\n    } catch(e) {\r\n        console.log(e);\r\n        throw e\r\n    }\r\n}","import React, { FunctionComponent } from \"react\"\r\nimport { User } from '../../models/User'\r\nimport { makeStyles, Typography, CardContent, Card, CardMedia } from \"@material-ui/core\"\r\n\r\ninterface IUserDisplayProps {\r\n    user:User\r\n}\r\nconst useStyles = makeStyles({ //customize this more!\r\n  root: {\r\n    margin: \"auto\",\r\n    minWidth: 275,\r\n    maxWidth:500\r\n  },\r\n  media: {\r\n    height:\"auto\",\r\n    width: \"100%\",\r\n    margin: \"auto\",\r\n  },\r\n  username: {\r\n    fontSize: 20,\r\n    fontFamily: \"Bookman Old Style\"\r\n  },\r\n  userInfo: {\r\n    color: \"textSecondary\",\r\n    fontFamily: \"Bookman Old Style\"\r\n  },\r\n})\r\n\r\nexport const UserDisplayComponent: FunctionComponent<IUserDisplayProps> = (props) =>{ \r\n    let classes = useStyles();\r\n    return (\r\n      <Card className={classes.root} >\r\n        <CardContent>\r\n        <CardMedia\r\n          component = \"img\"\r\n          className={classes.media}\r\n          alt=\"Profile Picture\"\r\n          image={props.user.image} \r\n        />\r\n          <Typography className={classes.username} gutterBottom>\r\n            Username : {props.user.username}\r\n          </Typography>\r\n          <Typography className={classes.userInfo}>\r\n            Password : {props.user.password}\r\n          </Typography>\r\n          <Typography className={classes.userInfo}>\r\n              First Name : {props.user.firstName}\r\n          </Typography>\r\n          <Typography className={classes.userInfo}>\r\n              Last Name : {props.user.lastName}\r\n          </Typography>\r\n          <Typography className={classes.userInfo}>\r\n              Email : {props.user.email}\r\n          </Typography>\r\n          <Typography className={classes.userInfo}>\r\n              Role : {props.user.role}\r\n          </Typography>\r\n        </CardContent>\r\n        {/* <CardActions>\r\n           <Button size=\"small\">Update User</Button>\r\n          We want this to be the button to press to update profile\r\n        </CardActions> */}\r\n      </Card>\r\n    );\r\n}","\r\nimport React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { User } from '../../models/User';\r\nimport { useParams} from 'react-router-dom'\r\nimport { lotrGetUserById } from '../../lotr-api/lotr-get-user-by-id';\r\nimport { UserDisplayComponent } from '../UserDisplayComponent/UserDisplayComponent';\r\n\r\nexport const ProfileComponent:FunctionComponent<any> = (props) => {\r\n    let [userProfile, changeUserProfile] = useState<null | User>(null)\r\n    let {userId} = useParams()\r\n\r\n    // this will run after every single render\r\n    useEffect(()=>{\r\n        //we define an async operation we want to run\r\n        let getUser = async ()=>{\r\n            //we await user info and then call a state updat function with it\r\n            let userInfo = await lotrGetUserById(userId)\r\n            changeUserProfile(userInfo)\r\n        }\r\n        //if we haven't gotten a user profile yet\r\n        if(!userProfile || userProfile.userId !== +userId){\r\n            //go get the user\r\n            getUser()\r\n        }\r\n        //else do nothing\r\n    })\r\n    \r\n    //why is this not working?\r\n    return (\r\n        (userProfile)?\r\n        <UserDisplayComponent user={userProfile} />\r\n        : \r\n        <div>\r\n            <h3>User Not Found</h3>\r\n        </div>\r\n    )\r\n}","import React, { FunctionComponent } from 'react';\r\nimport { withStyles, makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { green, lime } from '@material-ui/core/colors';\r\nimport { Card, CardContent, Typography, CardActions } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst SignUpButton = withStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.getContrastText(lime[700]),\r\n    backgroundColor: \"lime[700]\",\r\n    '&:hover': {\r\n      backgroundColor: green[900],\r\n    },\r\n  },\r\n}))(Button);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: { //figure out spacing for this (so it's relative to screen size and centered)\r\n    margin: \"auto\",\r\n    maxWidth: 600,\r\n    justifyContent: \"center\",\r\n  },\r\n  text: {\r\n    fontFamily:\"Bookman Old Style\",\r\n    color:\"black\"\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: lime[700],\r\n    color: 'white',\r\n    //background color? for when hovering/submitting?\r\n    fontFamily: \"Bookman Old Style\",\r\n    fontSize: 16,\r\n  }\r\n}));\r\n\r\nexport const HomeComponent:FunctionComponent<any> = (props) =>{\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n        {/* <CardMedia  /> \r\n        Insert image of middle earth here! (or slideshow?)*/}\r\n        <CardContent>\r\n            <Typography gutterBottom variant=\"h5\" component=\"h2\" className={classes.text}>\r\n                Become part of an expedition to save the world!                 \r\n            </Typography>\r\n            <Typography variant=\"body1\" component=\"p\" className={classes.text}>\r\n                Join the Fellowship of the Ring, a selective, diverse \r\n                team working to overthrow the Dark Lord as they travel across \r\n                the legendary, luscious landscape of Middle-Earth to \r\n                earn their places in the history books. \r\n                There’s only an 11% chance of dying!\r\n            </Typography>\r\n        </CardContent>\r\n        <CardActions className={classes.root}>\r\n          {/*EDIT THE LINKS IN THE BUTTONS */}\r\n            <Link to= \"/register\" style={{ textDecoration:\"none\"}}><SignUpButton variant=\"contained\" className={classes.submit}>\r\n              Register Now!\r\n            </SignUpButton></Link>  \r\n             or  <Link to=\"/login\" className={classes.text}>Login</Link>\r\n        </CardActions>\r\n    </Card>\r\n  )\r\n}","import { lotrClient } from \".\";\r\nimport { User } from \"../models/User\";\r\n\r\nexport const lotrSignUp = async (user:User) => {\r\n    \r\n    try{\r\n        console.log(user)\r\n        let response = await lotrClient.post('/register', user) //for the registration endpoint \r\n        console.log(response);\r\n        return response.data\r\n    } catch(e){\r\n        console.log(e);\r\n        throw e\r\n    }\r\n}","import React, { FunctionComponent, SyntheticEvent, useState } from \"react\";\r\nimport { Button, TextField, withStyles, makeStyles, Container, CssBaseline, Typography, Grid } from \"@material-ui/core\";\r\nimport { lotrSignUp } from \"../../lotr-api/lotr-sign-up\";\r\nimport { User } from \"../../models/User\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { Link } from 'react-router-dom';\r\nimport { green, lime } from \"@material-ui/core/colors\";\r\nimport {toast} from 'react-toastify'\r\n\r\ninterface ISignInProps extends RouteComponentProps{\r\n    changeCurrentUser:(newUser:any)=>void\r\n}\r\n\r\nexport const SignUpComponent:FunctionComponent<ISignInProps> = (props) =>{\r\n    const classes = useStyles();\r\n\r\n    let [username, changeUsername] = useState(\"\") \r\n    let [password, changePassword] = useState(\"\")\r\n    let [confirmPassword, changeConfirmPassword] = useState(\"\")\r\n    let [firstName, changeFirstName] = useState(\"\")\r\n    let [lastName, changeLastName] = useState(\"\")\r\n    let [email, changeEmail] = useState(\"\")\r\n    let [image, changeImage] = useState(null)\r\n\r\n    const updateUsername = (e:any) => {\r\n        e.preventDefault()\r\n        changeUsername(e.currentTarget.value)\r\n    }\r\n    const updatePassword = (e:any) => {\r\n        e.preventDefault()\r\n        changePassword(e.currentTarget.value)\r\n    }\r\n    const updateConfirmPassword = (e:any) => {\r\n        e.preventDefault()\r\n        changeConfirmPassword(e.currentTarget.value)\r\n    }\r\n    const updateFirstName = (e:any) => {\r\n        e.preventDefault()\r\n        changeFirstName(e.currentTarget.value)\r\n    }\r\n    const updateLastName = (e:any) => {\r\n        e.preventDefault()\r\n        changeLastName(e.currentTarget.value)\r\n    } \r\n    const updateEmail = (e:any) => {\r\n        e.preventDefault()\r\n        changeEmail(e.currentTarget.value)\r\n    }\r\n    const updateImage = (e:any) => {\r\n        e.preventDefault() //do I need this?\r\n        //type file has array called files, since you could upload multiple. Thus we speficy we want only want the first \r\n        let file:File = e.currentTarget.files[0]\r\n        if (file){\r\n          //utlize FileReader - the old way of doing it without promises\r\n          let reader = new FileReader()\r\n          //start an async function on reader object\r\n          reader.readAsDataURL(file)\r\n          //set a callback for when it's done reading\r\n          reader.onload = () =>{\r\n              console.log(reader.result); //to see binary representation of the image\r\n              changeImage(reader.result)\r\n          }\r\n        }\r\n        \r\n    }\r\n\r\n    const submitUser = async (e:SyntheticEvent) => {\r\n        e.preventDefault() // always have to prevent default of refreshing the page\r\n        if(password !== confirmPassword){\r\n            toast.error('Passwords Do Not Match!')\r\n        } else {\r\n            let newUser: User = { //assign values to new user\r\n                userId: 0,\r\n                username,\r\n                password,\r\n                firstName,\r\n                lastName,\r\n                email,\r\n                role: \"Member\", //changed roles to just be strings\r\n                image //need to add to models and user router!!!\r\n            }\r\n            let res = await lotrSignUp(newUser) //return a new user\r\n            props.changeCurrentUser(res) //change current user\r\n            props.history.push(`/user/profile/${res.userId}`) //send too profile page (or elsewhere?)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Register\r\n          </Typography>\r\n          <form autoComplete=\"off\" onSubmit={submitUser} className={classes.form} noValidate>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"username\"\r\n                  label=\"Username\"\r\n                  name=\"username\"\r\n                  value={username}\r\n                  onChange={updateUsername}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  value={password}\r\n                  onChange={updatePassword}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"confirm-password\"\r\n                  label=\"Confirm Password\"\r\n                  type=\"password\"\r\n                  id=\"confirm-password\"\r\n                  value={confirmPassword}\r\n                  onChange={updateConfirmPassword}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  onChange={updateEmail}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  id=\"firstName\"\r\n                  label=\"First Name\"\r\n                  name=\"firstName\"\r\n                  value={firstName}\r\n                  onChange={updateFirstName}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  id=\"lastName\"\r\n                  label=\"Last Name\"\r\n                  name=\"lastName\"\r\n                  value={lastName}\r\n                  onChange={updateLastName}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <label htmlFor=\"file\">Profile Picture</label> <br/>\r\n                <input type=\"file\" name=\"file\" accept=\"image/*\" onChange={updateImage} />\r\n                <img src={image} width=\"100%\"/>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <CustomButton\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                > Register\r\n                </CustomButton>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Link to= \"/home\" style={{ textDecoration:\"none\"}}>\r\n                <CustomButton\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                > Cancel \r\n                </CustomButton>\r\n                </Link>\r\n              </Grid>\r\n            </Grid>            \r\n          </form>\r\n        </div>\r\n      </Container>\r\n    )\r\n}\r\n\r\nconst CustomButton = withStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.getContrastText(lime[700]),\r\n    backgroundColor: \"lime[700]\",\r\n    '&:hover': {\r\n      backgroundColor: green[900],\r\n    },\r\n  },\r\n}))(Button);\r\n\r\n//styles at the bottom because closer to html return\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n      backgroundColor: lime[700],\r\n      color: 'white',\r\n      //background color?\r\n      fontFamily: \"Bookman Old Style\",\r\n      fontSize: 16\r\n    },\r\n    media: {\r\n\r\n    }\r\n}));","import { lotrClient } from \".\";\r\nimport { User } from \"../models/User\";\r\n\r\nexport const lotrUpdateUser = async (user:User) => {\r\n    \r\n    try{\r\n        console.log(user)\r\n        let response = await lotrClient.patch(`/users/update/${user.userId}`, user) //for the update endpoint\r\n        console.log(response);\r\n        return response.data\r\n    } catch(e){\r\n        console.log(e);\r\n        throw e\r\n    }\r\n}","import React, { FunctionComponent, SyntheticEvent, useState } from \"react\";\r\nimport { Button, TextField, makeStyles, Container, CssBaseline, Typography, Grid, withStyles } from \"@material-ui/core\";\r\nimport { lotrUpdateUser } from \"../../lotr-api/lotr-update-user\";\r\nimport { User } from \"../../models/User\";\r\nimport { Link, useParams, RouteComponentProps } from 'react-router-dom';\r\nimport { green, lime } from \"@material-ui/core/colors\";\r\nimport {toast} from 'react-toastify'\r\n\r\n// interface ISignInProps extends RouteComponentProps{\r\n//      user:User\r\n// } //check if this even works\r\n\r\nexport const UpdateProfileComponent:FunctionComponent<any> = (props) =>{\r\n    const classes = useStyles();\r\n\r\n    let {userId} = useParams()\r\n\r\n    let [username, changeUsername] = useState(\"\") \r\n    let [password, changePassword] = useState(\"\")\r\n    let [confirmPassword, changeConfirmPassword] = useState(\"\")\r\n    let [firstName, changeFirstName] = useState(\"\")\r\n    let [lastName, changeLastName] = useState(\"\")\r\n    let [email, changeEmail] = useState(\"\")\r\n    let [image, changeImage] = useState(null)\r\n\r\n    const updateUsername = (e:any) => {\r\n        e.preventDefault()\r\n        changeUsername(e.currentTarget.value)\r\n    }\r\n    const updatePassword = (e:any) => {\r\n        e.preventDefault()\r\n        changePassword(e.currentTarget.value)\r\n    }\r\n    const updateConfirmPassword = (e:any) => {\r\n        e.preventDefault()\r\n        changeConfirmPassword(e.currentTarget.value)\r\n    }\r\n    const updateFirstName = (e:any) => {\r\n        e.preventDefault()\r\n        if (e.currentTarget.value !== ''){\r\n            changeFirstName(e.currentTarget.value)\r\n        } \r\n    }\r\n    const updateLastName = (e:any) => {\r\n        e.preventDefault()\r\n        if (e.currentTarget.value !== ''){\r\n            changeLastName(e.currentTarget.value)\r\n        } \r\n    } \r\n    const updateEmail = (e:any) => {\r\n        e.preventDefault()\r\n        if (e.currentTarget.value !== ''){\r\n            changeEmail(e.currentTarget.value)\r\n        } \r\n    }\r\n    const updateImage = (e:any) => {\r\n        e.preventDefault()\r\n        //type file has array called files, since you could upload multiple. Thus we speficy we want only want the first \r\n        let file:File = e.currentTarget.files[0]\r\n        //utlize FileReader - the old way of doing it without promises\r\n        let reader = new FileReader()\r\n        //start an async function on reader object\r\n        reader.readAsDataURL(file)\r\n        //set a callback for when it's done reading\r\n        reader.onload = () =>{\r\n            console.log(reader.result); //to see binary representation of the image\r\n            changeImage(reader.result) \r\n        }\r\n    }\r\n\r\n    const updateUser = async (e:SyntheticEvent) => {\r\n        e.preventDefault() // always have to prevent default of refreshing the page\r\n        if(password !== confirmPassword){\r\n            toast.error('Passwords Do Not Match!')\r\n        } else if (username && props.user.image && !image){\r\n            toast.error('Please re-upload image so that file can be updated to match username!')\r\n        } else if (!username){\r\n            username = props.user.username\r\n            let updatedUser: User = { //assign values to new user\r\n              userId,\r\n              username,\r\n              password,\r\n              firstName,\r\n              lastName,\r\n              email,\r\n              role: \"Member\",\r\n              image \r\n          }\r\n          let res = await lotrUpdateUser(updatedUser) //make sure endpoint returns new user\r\n          props.history.push(`/user/profile/${res.userId}`) //send too profile page (or elsewhere?)\r\n        } else {\r\n            let updatedUser: User = { //assign values to new user\r\n                userId,\r\n                username,\r\n                password,\r\n                firstName,\r\n                lastName,\r\n                email,\r\n                role: \"Member\",\r\n                image \r\n            }\r\n            let res = await lotrUpdateUser(updatedUser) //make sure endpoint returns new user\r\n            props.history.push(`/user/profile/${res.userId}`) //send too profile page (or elsewhere?)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Update User Profile\r\n          </Typography>\r\n          <form autoComplete=\"off\" onSubmit={updateUser} className={classes.form} noValidate>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  fullWidth\r\n                  id=\"username\"\r\n                  label=\"New Username\"\r\n                  name=\"username\"\r\n                  value={username}\r\n                  onChange={updateUsername}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"New Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  value={password}\r\n                  onChange={updatePassword}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  fullWidth\r\n                  name=\"confirm-password\"\r\n                  label=\"Confirm New Password\"\r\n                  type=\"password\"\r\n                  id=\"confirm-password\"\r\n                  value={confirmPassword}\r\n                  onChange={updateConfirmPassword}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Change Email\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  onChange={updateEmail}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  id=\"firstName\"\r\n                  label=\"Change First Name\"\r\n                  name=\"firstName\"\r\n                  value={firstName}\r\n                  onChange={updateFirstName}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                  id=\"lastName\"\r\n                  label=\"Change Last Name\"\r\n                  name=\"lastName\"\r\n                  value={lastName}\r\n                  onChange={updateLastName}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <label htmlFor=\"file\">Change Profile Picture</label> <br/>\r\n                <input type=\"file\" name=\"file\" accept=\"image/*\" onChange={updateImage} />\r\n                <img src={image} width=\"100%\"/>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <CustomButton\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                > Update\r\n                </CustomButton>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <Link to= \"/home\" style={{ textDecoration:\"none\"}}>\r\n                <CustomButton\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                > Cancel \r\n                </CustomButton>\r\n                </Link>\r\n              </Grid>\r\n            </Grid>            \r\n          </form>\r\n        </div>\r\n      </Container>\r\n    )\r\n}\r\nconst CustomButton = withStyles((theme) => ({\r\n  root: {\r\n      color: theme.palette.getContrastText(lime[700]),\r\n      backgroundColor: \"lime[700]\",\r\n      '&:hover': {\r\n        backgroundColor: green[900],\r\n      },\r\n  },\r\n}))(Button);\r\n\r\n//styles at the bottom because closer to html return\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n      backgroundColor: lime[700],\r\n      color: 'white',\r\n      //background color?\r\n      fontFamily: \"Bookman Old Style\",\r\n      fontSize: 16\r\n    },\r\n    media: {\r\n\r\n    }\r\n}));","import { lotrClient } from \".\"\r\n\r\nexport const lotrLogOut = async () =>{\r\n    try {\r\n        let response = await lotrClient.delete('/logout')\r\n        console.log(response);\r\n        return response.data //should be null?\r\n    } catch (e) {\r\n        console.log(e)\r\n        throw e\r\n    }\r\n}","import React, { FunctionComponent, SyntheticEvent } from \"react\";\r\nimport { lotrLogOut } from \"../../lotr-api/lotr-logout\";\r\nimport { Button, makeStyles, CssBaseline, Container, Typography, Grid } from \"@material-ui/core\";\r\nimport { RouteComponentProps } from \"react-router\";\r\n\r\ninterface ILogoutProps extends RouteComponentProps{\r\n    changeCurrentUser:(newUser:any)=>void\r\n}\r\n\r\nexport const LogOutComponent: FunctionComponent<ILogoutProps> = (props)=>{\r\n    const classes = useStyles();\r\n\r\n    const logoutUser = async (e: SyntheticEvent) => {\r\n        e.preventDefault()\r\n\r\n        let res = await lotrLogOut()\r\n        console.log(res)\r\n        props.changeCurrentUser(res)\r\n        props.history.push(`/home`)\r\n    } \r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n          <div className={classes.paper}>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n                Are you sure you want to log out?\r\n            </Typography>\r\n            <Grid item xs={12}>\r\n               <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  onClick={logoutUser}\r\n                > Logout\r\n              </Button>\r\n            </Grid>\r\n          </div>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\n//styles at the bottom because closer to html return\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      marginTop: theme.spacing(8),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%',\r\n      marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n      backgroundColor: 'green',\r\n      color: 'white',\r\n      //background color?\r\n      //fontFamily: '',\r\n      fontSize: 16,\r\n    },\r\n\r\n}));","import React, { useState } from 'react';\nimport './App.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport {ToastContainer} from 'react-toastify'\nimport {BrowserRouter as Router, Route} from \"react-router-dom\" //just changed name of router\n\nimport { User } from './models/User';\n\nimport { LoginComponent } from './components/LoginComponent/LoginComponent'\nimport { NavBarComponent } from './components/NavBarComponent/NavBarComponent';\nimport { ProfileComponent } from './components/ProfileComponent/ProfileComponent';\nimport { HomeComponent } from './components/HomeComponent/HomeComponent'\nimport { SignUpComponent } from './components/SignUpComponent/SignUpComponent';\nimport { UpdateProfileComponent } from './components/UpdateProfileComponent/UpdateProfileComponent';\nimport { LogOutComponent } from './components/LogOutComponent/LogOutComponent';\n\n//import { AllUsersComponent } from './components/AllUsersComponent/AllUsersComponent';\n\n\nfunction App() {\n  const [currentUser, changeCurrentUser] = useState<null | User>(null)\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <NavBarComponent user={currentUser}/>\n        {/*Route path='/users' component={AllUsersComponent}/> */}\n        <Route path='/home' component={HomeComponent}/>\n        {/*Figure out how to make this the start up screen */}\n        <Route path='/login' render={(props)=>(<LoginComponent changeCurrentUser={changeCurrentUser} {...props} />)} />\n        <Route path='/user/profile/:userId' component={ProfileComponent}/>\n        <Route path='/user/update/:userId' render={(props)=>(<UpdateProfileComponent user={currentUser} {...props}/>)}/>\n        <Route path='/register' render={(props)=>(<SignUpComponent changeCurrentUser={changeCurrentUser} {...props} />)}/>\n        <Route path='/logout' render={(props)=>(<LogOutComponent changeCurrentUser={changeCurrentUser} {...props}/>)}/>\n        <br/>\n      </Router>\n      <ToastContainer position=\"bottom-right\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}